datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================================
// MODELOS DE MÍDIA PRINCIPAIS
// =================================================================================

model Filme {
  id              Int       @id @default(autoincrement())
  tmdbId          Int       @unique
  imdbId          String?   @unique
  title           String
  originalTitle   String?
  overview        String?   @db.Text
  releaseDate     DateTime?
  runtime         Int?
  budget          BigInt?
  revenue         BigInt?
  popularity      Float?
  voteAverage     Float?
  voteCount       Int?
  status          String?
  tagline         String?
  homepage        String?
  posterPath      String?
  backdropPath    String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  adult           Boolean?  @default(false)
  collectionId    Int?
  ingresso_link   String?
  em_prevenda     Boolean?  @default(false)
  ultima_verificacao_ingresso DateTime?
  releaseType                 String?

  // Relacionamentos
  genres          FilmeGenero[]
  companies       FilmeCompany[]
  countries       FilmeCountry[]
  languages       FilmeLanguage[]
  collection      Collection? @relation(fields: [collectionId], references: [id])
  cast            FilmeCast[]
  crew            FilmeCrew[]
  videos          Video[]
  streamingProviders FilmeOnStreamingProvider[]
  premiacoes         Json?
}

model Serie {
  id               Int       @id @default(autoincrement())
  tmdbId           Int       @unique
  name             String
  originalName     String?
  overview         String?   @db.Text
  firstAirDate     DateTime?
  lastAirDate      DateTime?
  numberOfSeasons  Int?
  numberOfEpisodes Int?
  popularity       Float?
  voteAverage      Float?
  voteCount        Int?
  status           String?
  posterPath       String?
  backdropPath     String?
  homepage         String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  adult            Boolean?  @default(false)
  inProduction     Boolean?
  type             String?
  tagline          String?
  episodeRunTime   Int[]

  // Relacionamentos
  genres           SerieGenero[]
  networks         SerieNetwork[]
  languages        SerieLanguage[]
  seasons          Temporada[]
  createdBy        SerieCreator[]
  cast             SerieCast[]
  crew             SerieCrew[]
  videos           Video[]
  streamingProviders SerieOnStreamingProvider[]
  premiacoes         Json?
}

model Anime {
  id             Int       @id @default(autoincrement())
  anilistId      Int       @unique
  malId          Int?      @unique
  titleRomaji    String
  titleEnglish   String?
  titleNative    String?
  description    String?   @db.Text
  episodes       Int?
  season         String?
  seasonYear     Int?
  format         String?
  status         String?
  startDate      DateTime?
  endDate        DateTime?
  averageScore   Int?
  meanScore      Int?
  popularity     Int?
  duration       Int?
  source         String?
  siteUrl        String?
  coverImage     String?
  bannerImage    String?
  synonyms       String[]
  countryOfOrigin String?
  hashtag        String?
  isLicensed     Boolean?
  isAdult        Boolean?  @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relacionamentos
  genres         AnimeOnGenero[]
  studios        AnimeOnStudio[]
  characters     AnimeCharacter[]
  staff          AnimeStaff[]
  streamingLinks AnimeStreamingLink[]
  tags           AnimeOnTag[]
  ranks          AnimeRank[]
  externalLinks  AnimeExternalLink[]
  // Relacionamentos entre animes (sequels, prequels, etc.)
  sourceRelations  AnimeRelation[] @relation("SourceRelations")
  relatedRelations AnimeRelation[] @relation("RelatedRelations")
  airingSchedule      AiringSchedule[] @relation("AnimeToAiringSchedule")
  premiacoes          Json?
}

model Jogo {
  id                    Int       @id @default(autoincrement())
  igdbId                Int       @unique
  name                  String
  slug                  String?
  summary               String?   @db.Text
  storyline             String?   @db.Text
  firstReleaseDate      DateTime?
  rating                Float?
  ratingCount           Int?
  aggregatedRating      Float?
  aggregatedRatingCount Int?
  url                   String?
  cover                 String?
  category              String?
  status                String?
  hypes                 Int?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Relacionamentos
  genres                JogoOnGenero[]
  platforms             JogoOnPlataforma[]
  companies             JogoOnCompany[]
  themes                JogoOnTheme[]
  playerPerspectives    JogoOnPlayerPerspective[]
  screenshots           Screenshot[]
  artworks              Artwork[]
  videos                Video[]
  websites              Website[]
  ageRatings            JogoOnAgeRating[]
  gameModes             JogoOnGameMode[]
  gameEngines           JogoOnGameEngine[]
  sourceRelations       GameRelation[] @relation("SourceRelations")
  relatedRelations      GameRelation[] @relation("RelatedRelations")
  eventId               Int?
  event                 Event?         @relation(fields: [eventId], references: [id])
  premiacoes            Json?
}

// =================================================================================
// MODELOS DE ENTIDADES (Pessoas, Gêneros, Empresas, etc.)
// =================================================================================

model Video {
  id        Int     @id @default(autoincrement())
  tmdbId    String? @unique
  key       String
  name      String
  site      String
  type      String
  official  Boolean

  filme   Filme? @relation(fields: [filmeId], references: [id])
  filmeId Int?

  serie   Serie? @relation(fields: [serieId], references: [id])
  serieId Int?

  jogo    Jogo?  @relation(fields: [jogoId], references: [id])
  jogoId  Int?
}

// --- ENTIDADES: FILMES E SÉRIES ---

model Genero {
  id     Int    @id @default(autoincrement())
  tmdbId Int    @unique
  name   String @unique
  filmes FilmeGenero[]
  series SerieGenero[]
}

model Company {
  id     Int    @id @default(autoincrement())
  tmdbId Int    @unique
  name   String
  filmes FilmeCompany[]
}

model Country {
  id     Int    @id @default(autoincrement())
  iso    String @unique
  name   String
  filmes FilmeCountry[]
}

model Language {
  id     Int    @id @default(autoincrement())
  iso    String @unique
  name   String
  filmes FilmeLanguage[]
  series SerieLanguage[]
}

model Collection {
  id           Int     @id @unique
  name         String
  posterPath   String?
  backdropPath String?
  filmes       Filme[]
}

model Pessoa {
  id          Int     @id @default(autoincrement())
  tmdbId      Int     @unique
  name        String
  profilePath String?
  filmeCast   FilmeCast[]
  filmeCrew   FilmeCrew[]
  serieCast   SerieCast[]
  serieCrew   SerieCrew[]
  createdBy   SerieCreator[]
}

model Network {
  id       Int     @id @default(autoincrement())
  tmdbId   Int     @unique
  name     String
  logoPath String?
  series   SerieNetwork[]
}

model Temporada {
  id           Int       @id @default(autoincrement())
  tmdbId       Int       @unique
  airDate      DateTime?
  episodeCount Int?
  name         String
  overview     String?   @db.Text
  posterPath   String?
  seasonNumber Int
  serie        Serie     @relation(fields: [serieId], references: [id])
  serieId      Int
}

model StreamingProvider {
  id        Int      @id @default(autoincrement())
  tmdbId    Int      @unique
  name      String
  logoPath  String?
  filmes    FilmeOnStreamingProvider[]
  series    SerieOnStreamingProvider[]
}

// --- ENTIDADES: ANIMES ---

model AnimeGenero {
  id     Int    @id @default(autoincrement())
  name   String @unique
  animes AnimeOnGenero[]
}

model AnimeStudio {
  id        Int    @id @default(autoincrement())
  anilistId Int    @unique
  name      String @unique
  animes    AnimeOnStudio[]
}

model Personagem {
  id        Int     @id @default(autoincrement())
  anilistId Int     @unique
  name      String
  image     String?
  animes    AnimeCharacter[]
}

model Dublador {
  id                   Int      @id @default(autoincrement())
  anilistId            Int      @unique
  name                 String
  language             String
  image                String?
  personagens_dublados AnimeCharacterVoiceActor[]
}

model MembroStaff {
  id                 Int     @id @default(autoincrement())
  anilistId          Int     @unique
  name               String
  image              String?
  animes_trabalhados AnimeStaff[]
}

model AnimeStreamingLink {
  id        Int     @id @default(autoincrement())
  url       String
  site      String
  thumbnail String?
  anime     Anime   @relation(fields: [animeId], references: [id])
  animeId   Int
}

model AnimeTag {
  id          Int      @id
  name        String   @unique
  description String?
  category    String?
  isAdult     Boolean?
  animes      AnimeOnTag[]
}

model AnimeRank {
  id      Int    @id @default(autoincrement())
  anime   Anime  @relation(fields: [animeId], references: [id])
  animeId Int
  rank    Int
  type    String // Ex: 'RATED' ou 'POPULAR'
  context String
  year    Int?
  allTime Boolean?
}

model AnimeExternalLink {
  id      Int    @id @default(autoincrement())
  anime   Anime  @relation(fields: [animeId], references: [id])
  animeId Int
  url     String
  site    String
}

model AiringSchedule {
  id       Int      @id @default(autoincrement())
  anime    Anime    @relation("AnimeToAiringSchedule", fields: [animeId], references: [id])
  animeId  Int
  airingAt DateTime
  episode  Int
}

// --- ENTIDADES: JOGOS ---

model JogoGenero {
  id     Int    @id @default(autoincrement())
  igdbId Int    @unique
  name   String @unique
  jogos  JogoOnGenero[]
}

model JogoPlataforma {
  id     Int    @id @default(autoincrement())
  igdbId Int    @unique
  name   String @unique
  jogos  JogoOnPlataforma[]
}

model JogoCompany {
  id        Int     @id @default(autoincrement())
  igdbId    Int     @unique
  name      String
  jogos     JogoOnCompany[]
}

model JogoTheme {
  id     Int    @id @default(autoincrement())
  igdbId Int    @unique
  name   String @unique
  jogos  JogoOnTheme[]
}

model JogoPlayerPerspective {
  id     Int    @id @default(autoincrement())
  igdbId Int    @unique
  name   String @unique
  jogos  JogoOnPlayerPerspective[]
}

model Screenshot {
  id     Int     @id @default(autoincrement())
  igdbId Int     @unique
  url    String
  jogo   Jogo    @relation(fields: [jogoId], references: [id])
  jogoId Int
}

model Artwork {
  id     Int     @id @default(autoincrement())
  igdbId Int     @unique
  url    String
  jogo   Jogo    @relation(fields: [jogoId], references: [id])
  jogoId Int
}

model Website {
  id       Int    @id @default(autoincrement())
  igdbId   Int?
  category Int
  url      String
  jogo     Jogo   @relation(fields: [jogoId], references: [id])
  jogoId   Int
}

model AgeRating {
  id          Int      @id
  category    String   // e.g., 'ESRB', 'PEGI'
  rating      String   // e.g., 'T', '12'
  description String?
  jogos       JogoOnAgeRating[]
}

model GameMode {
  id    Int    @id
  name  String @unique
  slug  String @unique
  jogos JogoOnGameMode[]
}

model GameEngine {
  id    Int    @id
  name  String @unique
  slug  String @unique
  jogos JogoOnGameEngine[]
}


// =================================================================================
// TABELAS DE JUNÇÃO (MUITOS-PARA-MUITOS EXPLÍCITAS)
// =================================================================================

// --- JUNÇÕES: FILMES ---

model FilmeGenero {
  filme    Filme  @relation(fields: [filmeId], references: [id])
  filmeId  Int
  genero   Genero @relation(fields: [generoId], references: [id])
  generoId Int

  @@id([filmeId, generoId])
}

model FilmeCompany {
  filme     Filme   @relation(fields: [filmeId], references: [id])
  filmeId   Int
  company   Company @relation(fields: [companyId], references: [id])
  companyId Int

  @@id([filmeId, companyId])
}

model FilmeCountry {
  filme     Filme   @relation(fields: [filmeId], references: [id])
  filmeId   Int
  country   Country @relation(fields: [countryId], references: [id])
  countryId Int

  @@id([filmeId, countryId])
}

model FilmeLanguage {
  filme      Filme    @relation(fields: [filmeId], references: [id])
  filmeId    Int
  language   Language @relation(fields: [languageId], references: [id])
  languageId Int

  @@id([filmeId, languageId])
}

model FilmeCast {
  filme       Filme   @relation(fields: [filmeId], references: [id])
  filmeId     Int
  pessoa      Pessoa  @relation(fields: [pessoaId], references: [id])
  pessoaId    Int
  character   String?
  order       Int

  @@id([filmeId, pessoaId, order])
}

model FilmeCrew {
  filme      Filme  @relation(fields: [filmeId], references: [id])
  filmeId    Int
  pessoa     Pessoa @relation(fields: [pessoaId], references: [id])
  pessoaId   Int
  job        String
  department String?

  @@id([filmeId, pessoaId, job])
}

model FilmeOnStreamingProvider {
  filme      Filme             @relation(fields: [filmeId], references: [id])
  filmeId    Int
  provider   StreamingProvider @relation(fields: [providerId], references: [id])
  providerId Int

  @@id([filmeId, providerId])
}

// --- JUNÇÕES: SÉRIES ---

model SerieGenero {
  serie    Serie  @relation(fields: [serieId], references: [id])
  serieId  Int
  genero   Genero @relation(fields: [generoId], references: [id])
  generoId Int

  @@id([serieId, generoId])
}

model SerieNetwork {
  serie     Serie   @relation(fields: [serieId], references: [id])
  serieId   Int
  network   Network @relation(fields: [networkId], references: [id])
  networkId Int

  @@id([serieId, networkId])
}

model SerieLanguage {
  serie      Serie    @relation(fields: [serieId], references: [id])
  serieId    Int
  language   Language @relation(fields: [languageId], references: [id])
  languageId Int

  @@id([serieId, languageId])
}

model SerieOnStreamingProvider {
  serie      Serie             @relation(fields: [serieId], references: [id])
  serieId    Int
  provider   StreamingProvider @relation(fields: [providerId], references: [id])
  providerId Int

  @@id([serieId, providerId])
}

model SerieCreator {
  serie    Serie  @relation(fields: [serieId], references: [id])
  serieId  Int
  pessoa   Pessoa @relation(fields: [pessoaId], references: [id])
  pessoaId Int

  @@id([serieId, pessoaId])
}

model SerieCast {
  serie       Serie   @relation(fields: [serieId], references: [id])
  serieId     Int
  pessoa      Pessoa  @relation(fields: [pessoaId], references: [id])
  pessoaId    Int
  character   String?
  order       Int

  @@id([serieId, pessoaId, order])
}

model SerieCrew {
  serie      Serie  @relation(fields: [serieId], references: [id])
  serieId    Int
  pessoa     Pessoa @relation(fields: [pessoaId], references: [id])
  pessoaId   Int
  job        String
  department String?

  @@id([serieId, pessoaId, job])
}

// --- JUNÇÕES: ANIMES ---

model AnimeOnGenero {
  anime    Anime       @relation(fields: [animeId], references: [id])
  animeId  Int
  genero   AnimeGenero @relation(fields: [generoId], references: [id])
  generoId Int

  @@id([animeId, generoId])
}

model AnimeOnStudio {
  anime     Anime       @relation(fields: [animeId], references: [id])
  animeId   Int
  studio    AnimeStudio @relation(fields: [studioId], references: [id])
  studioId  Int

  @@id([animeId, studioId])
}

model AnimeCharacter {
  id          Int        @id @default(autoincrement())
  anime       Anime      @relation(fields: [animeId], references: [id])
  animeId     Int
  character   Personagem @relation(fields: [characterId], references: [id])
  characterId Int
  role        String
  voiceActors AnimeCharacterVoiceActor[]

  @@unique([animeId, characterId, role])
}

model AnimeCharacterVoiceActor {
  animeCharacter   AnimeCharacter @relation(fields: [animeCharacterId], references: [id])
  animeCharacterId Int
  dublador         Dublador       @relation(fields: [dubladorId], references: [id])
  dubladorId       Int

  @@id([animeCharacterId, dubladorId])
}

model AnimeStaff {
  anime    Anime       @relation(fields: [animeId], references: [id])
  animeId  Int
  staff    MembroStaff @relation(fields: [staffId], references: [id])
  staffId  Int
  role     String

  @@id([animeId, staffId, role])
}

model AnimeOnTag {
  anime   Anime    @relation(fields: [animeId], references: [id])
  animeId Int
  tag     AnimeTag @relation(fields: [tagId], references: [id])
  tagId   Int

  @@id([animeId, tagId])
}

model AnimeRelation {
  sourceAnimeId  Int
  sourceAnime    Anime  @relation("SourceRelations", fields: [sourceAnimeId], references: [id])
  relatedAnimeId Int
  relatedAnime   Anime  @relation("RelatedRelations", fields: [relatedAnimeId], references: [id])
  relationType   String // Ex: SEQUEL, PREQUEL, ADAPTATION, etc.

  @@id([sourceAnimeId, relatedAnimeId, relationType])
}

// --- JUNÇÕES: JOGOS ---

model JogoOnGenero {
  jogo     Jogo       @relation(fields: [jogoId], references: [id])
  jogoId   Int
  genero   JogoGenero @relation(fields: [generoId], references: [id])
  generoId Int

  @@id([jogoId, generoId])
}

model JogoOnPlataforma {
  jogo       Jogo           @relation(fields: [jogoId], references: [id])
  jogoId     Int
  plataforma JogoPlataforma @relation(fields: [plataformaId], references: [id])
  plataformaId Int

  @@id([jogoId, plataformaId])
}

model JogoOnCompany {
  jogo      Jogo        @relation(fields: [jogoId], references: [id])
  jogoId    Int
  company   JogoCompany @relation(fields: [companyId], references: [id])
  companyId Int
  role      String // From IGDB: developer, publisher, porting, supporting

  @@id([jogoId, companyId, role])
}

model JogoOnTheme {
  jogo    Jogo      @relation(fields: [jogoId], references: [id])
  jogoId  Int
  theme   JogoTheme @relation(fields: [themeId], references: [id])
  themeId Int

  @@id([jogoId, themeId])
}

model JogoOnPlayerPerspective {
  jogo          Jogo                  @relation(fields: [jogoId], references: [id])
  jogoId        Int
  perspective   JogoPlayerPerspective @relation(fields: [perspectiveId], references: [id])
  perspectiveId Int

  @@id([jogoId, perspectiveId])
}

model JogoOnAgeRating {
  jogo        Jogo      @relation(fields: [jogoId], references: [id])
  jogoId      Int
  ageRating   AgeRating @relation(fields: [ageRatingId], references: [id])
  ageRatingId Int

  @@id([jogoId, ageRatingId])
}

model JogoOnGameMode {
  jogo       Jogo     @relation(fields: [jogoId], references: [id])
  jogoId     Int
  gameMode   GameMode @relation(fields: [gameModeId], references: [id])
  gameModeId Int

  @@id([jogoId, gameModeId])
}

model JogoOnGameEngine {
  jogo       Jogo       @relation(fields: [jogoId], references: [id])
  jogoId     Int
  gameEngine GameEngine @relation(fields: [gameEngineId], references: [id])
  gameEngineId Int

  @@id([jogoId, gameEngineId])
}

model GameRelation {
  sourceGameId  Int
  sourceGame    Jogo   @relation("SourceRelations", fields: [sourceGameId], references: [id])
  relatedGameId Int
  relatedGame   Jogo   @relation("RelatedRelations", fields: [relatedGameId], references: [id])
  type          String // From IGDB: dlc, expansion, remake, remaster, parent_game, etc.

  @@id([sourceGameId, relatedGameId, type])
}

model Event {
  id          Int       @id @default(autoincrement())
  igdbId      Int       @unique
  name        String
  description String?
  start_time  DateTime?
  end_time    DateTime?
  url         String?
  games       Jogo[]
}

// =================================================================================
// MODELOS DE USUÁRIO E PREFERÊNCIAS
// =================================================================================

model User {
  id              Int                          @id @default(autoincrement())
  email           String                       @unique
  hashed_password String
  role            String                       @default("user")
  quer_avaliar    Boolean                      @default(true)
  data_criacao    DateTime                     @default(now())

  // Relacionamento com as preferências do usuário
  preferencias    preferencias_usuario_midia[]
  notifications   Notification[]
}

model Notification {
  id               Int      @id @default(autoincrement())
  user             User     @relation(fields: [userId], references: [id])
  userId           Int
  type             String   // Ex: 'NEW_SEASON'
  message          String
  isRead           Boolean  @default(false)
  relatedMediaId   Int?
  relatedMediaType String?
  createdAt        DateTime @default(now())
}

model preferencias_usuario_midia {
  id             Int      @id @default(autoincrement())
  usuario_id     Int
  midia_id       Int      // O ID da API externa (TMDB, Anilist, IGDB)
  tipo_midia     String   // 'filme', 'serie', 'anime', 'jogo'
  status         String   // 'favorito', 'quero_assistir', 'acompanhando', 'assistido', 'oculto'
  avaliacao      String?  // 'gostei', 'amei', 'nao_gostei'
  data_interacao DateTime @default(now())

  // Relacionamento com o usuário
  usuario        User     @relation(fields: [usuario_id], references: [id])

  @@unique([usuario_id, midia_id, tipo_midia], name: "usuario_midia_unique")
}
